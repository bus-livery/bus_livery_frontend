import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

String _appColors = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, AppColors> _supportedCustomColor = {
    'primary': AppColorsLight(),
    'dark': AppColorsDark(),
  };

  // A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.AppColorscheme,
    'dark': ColorSchemes.DarkColorscheme,
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appColors = newTheme;
  }

  /// Returns the primary colors for the current theme.
  AppColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appColors)) {
      throw Exception(
        "$_appColors is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner",
      );
    }
    //return theme from map

    return _supportedCustomColor[_appColors] ?? AppColorsLight();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appColors)) {
      throw Exception(
        "$_appColors is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner",
      );
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appColors] ?? ColorSchemes.AppColorscheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(vertical: -4, horizontal: -4),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appColors.cGrey,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  AppColors appColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData appThemeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodySmall: TextStyle(
      color: appColors.cPrimary,
      fontSize: 10.sp,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    headlineMedium: TextStyle(
      color: colorScheme.primary,
      fontSize: 28.sp,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: appColors.cBlack,
      fontSize: 12.sp,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
    titleMedium: TextStyle(
      color: appColors.cBlack,
      fontSize: 18.sp,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const AppColorscheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF061933),
    primaryContainer: Color(0X2C53549B),

    // Error colors
    errorContainer: Color(0XFF282F3E),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X5A7388A9),
    onPrimaryContainer: Color(0XFF040405),
  );

  static const DarkColorscheme = ColorScheme.dark(
    // Primary colors
    primary: Color(0XFF061933),
    primaryContainer: Color(0X2C53549B),

    // Error colors
    errorContainer: Color(0XFF282F3E),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X5A7388A9),
    onPrimaryContainer: Color(0XFF040405),
  );
}

abstract class AppColors {
  Color get cPrimary;

  Color get cBlack;

  Color get cGrey;
}

/// Class containing app colors for a primary theme.
class AppColorsLight extends AppColors {
  @override
  Color get cPrimary => Colors.blue;
  // Black
  @override
  Color get cBlack => const Color(0XFF000000);

  @override
  Color get cGrey => Colors.grey;
}

class AppColorsDark extends AppColors {
  @override
  Color get cPrimary => Colors.blue;
  // Black
  @override
  Color get cBlack => const Color(0XFF000000);

  @override
  Color get cGrey => Colors.grey;
}

AppColors get appColors => ThemeHelper().appColor();
ThemeData get appTheme => ThemeHelper().appThemeData();
